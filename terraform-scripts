main.tf
=======


provider "aws" {
    access_key = "${var.access_key}"
    secret_key = "${var.secret_key}"
    region = "ap-south-1"
}

resource "aws_instance" "ec2_instance" {
    ami = "${var.ami_id}"
    count = "${var.number_of_instances}"
    subnet_id = "${var.subnet_id}"
    instance_type = "${var.instance_type}"
    key_name = "${var.ami_key_pair_name}"
}

====================================================================================================

terraform-keys.tf
===========

access_key = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
secret_key = "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"

====================================================================================================
Variables.tf
=======


variable "access_key" {
        description = "Access key to AWS console"
}
variable "secret_key" {
        description = "Secret key to AWS console"
}


variable "instance_name" {
        description = "Name of the instance to be created"
        default = "DEMO-instance"
}

variable "instance_type" {
        default = "t2.micro"
}

variable "subnet_id" {
        description = "The VPC subnet the instance(s) will be created in"
        default = "subnet-XXXXXXXXXXXXXXXX"
}

variable "ami_id" {
        description = "The AMI to use"
        default = "ami-08e5424edfe926b43"
}

variable "number_of_instances" {
        description = "number of instances to be created"
        default = 1
}


variable "ami_key_pair_name" {
        default = "Aditya"
}

====================================================================================================
Terraform cmds:
===============

terraform init     		# initializes a new or existing terraform configuration, downloading required providers and modules

terraform validate		# configuration files for syntax errors and other issues.

terraform plan			# execution plan, showing the changes that will be made

terraform apply			# creating or modifying the infrastructure

terraform destroy		# delete or destroy particular or all

terraform destroy -target= <"  ">		# specific target

terraform state rm <resource_type.resource_name>


terraform show			# shows the current state  saved execution plan

terraform state <sub-cmd>	# allowing to inspect, modify and perform other operations

terraform refresh		# updates

terraform output		# displays output defined

terraform import <address> <id>  # resources that were not initially created with terraform.

terraform fmt			# rewrites terraform files

terraform version		# displays the version of terraform

	 



